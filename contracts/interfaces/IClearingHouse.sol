// SPDX-License-Identifier: AGPL-3.0
pragma solidity 0.8.4;

// interfaces
import {IClearingHouse} from "./IClearingHouse.sol";
import {IPerpetual} from "./IPerpetual.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {IVault} from "./IVault.sol";
import {ICryptoSwap} from "./ICryptoSwap.sol";
import {IInsurance} from "./IInsurance.sol";

// libraries
import {LibPerpetual} from "../lib/LibPerpetual.sol";

interface IClearingHouse {
    /* ****************** */
    /*     Events         */
    /* ****************** */

    /// @notice Emitted when new perpetual market is added
    /// @param perpetual The new perpetual market
    /// @param numPerpetuals The number of perpetual markets
    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);

    /// @notice Emitted when collateral is deposited into the vault
    /// @param idx Index of the perpetual market
    /// @param user User who deposited collateral
    /// @param asset Token to be used for the collateral
    /// @param amount Amount to be used as collateral. Might not be 18 decimals
    event Deposit(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);

    /// @notice Emitted when collateral is withdrawn from the vault
    /// @param idx Index of the perpetual market
    /// @param user User who deposited collateral
    /// @param asset Amount to be used as collateral. Might not be 18 decimals
    /// @param amount Token to be used for the collateral
    event Withdraw(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);

    /// @notice Emitted when a position is extended/opened
    /// @param idx Index of the perpetual market
    /// @param user User who deposited collateral
    /// @param direction Whether the position is LONG or SHORT
    /// @param addedOpenNotional Notional (USD assets/debt) added to the position
    /// @param addedPositionSize positionSize (Base assets/debt) added to the position
    event ExtendPosition(
        uint256 indexed idx,
        address indexed user,
        LibPerpetual.Side direction,
        int256 addedOpenNotional,
        int256 addedPositionSize
    );
    /// @notice Emitted when a position is reduced/closed
    /// @param idx Index of the perpetual market
    /// @param user User who deposited collateral
    /// @param reducedOpenNotional notional (USD assets/debt) removed from the position
    /// @param reducedPositionSize positionSize (Base assets/debt) removed from the position
    event ReducePosition(
        uint256 indexed idx,
        address indexed user,
        int256 reducedOpenNotional,
        int256 reducedPositionSize
    );
    /// @notice Emitted when a trader position is liquidated
    /// @param idx Index of the perpetual market
    /// @param liquidatee User who gets liquidated
    /// @param liquidator User who is liquidating
    /// @param notional Notional amount of the liquidatee
    event LiquidationCall(
        uint256 indexed idx,
        address indexed liquidatee,
        address indexed liquidator,
        uint256 notional
    );
    /// @notice Emitted when a (additional) liquidity is provided
    /// @param idx Index of the perpetual market
    /// @param liquidityProvider User who provides liquidity
    /// @param asset  Token to be added to the pool
    /// @param amount Amount of token to be added to the pool. Might not have 18 decimals
    event LiquidityProvided(
        uint256 indexed idx,
        address indexed liquidityProvider,
        address indexed asset,
        uint256 amount
    );
    /// @notice Emitted when a (additional) liquidity is removed
    /// @param idx Index of the perpetual market
    /// @param liquidityProvider User who provides liquidity
    /// @param removedLiquidity Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals
    /// @param vQuoteProceeds Amount of vQuote proceeds to be removed from the pool. 18 decimals
    /// @param vBaseAmount Amount of vBase proceeds to be removed from the pool. 18 decimals
    /// @param profit Profit generated by the liquidity provider. 18 decimals
    event LiquidityRemoved(
        uint256 indexed idx,
        address indexed liquidityProvider,
        uint256 removedLiquidity,
        int256 vQuoteProceeds,
        int256 vBaseAmount,
        int256 profit,
        address indexed asset
    );

    /// @notice Emitted when dust is sold by governance
    /// @param idx Index of the perpetual market
    /// @param profit Amount of profit generated by the dust sale. 18 decimals
    event DustSold(uint256 indexed idx, int256 profit);

    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance
    /// @param amount Amount of insurance reserves withdrawn. 18 decimals
    event InsuranceRemoved(uint256 amount);

    /* ****************** */
    /*     Viewer         */
    /* ****************** */

    function vault() external view returns (IVault);

    function insurance() external view returns (IInsurance);

    function perpetuals(uint256 idx) external view returns (IPerpetual);

    function getNumMarkets() external view returns (uint256);

    function marginIsValid(
        uint256 idx,
        address account,
        int256 ratio
    ) external view returns (bool);

    function marginRatio(uint256 idx, address account) external view returns (int256);

    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view returns (uint256);

    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view returns (uint256);

    function getFundingPayments(uint256 idx, address account) external view returns (int256 upcomingFundingPayment);

    function getUnrealizedPnL(uint256 idx, address account) external view returns (int256);

    function getTraderReserveValue(uint256 idx, address account) external view returns (int256);

    function getLpReserveValue(uint256 idx, address account) external view returns (int256);

    function marketPriceOracle(uint256 idx) external view returns (uint256);

    function marketPrice(uint256 idx) external view returns (uint256);

    function indexPrice(uint256 idx) external view returns (int256);

    function getGlobalPosition(uint256 idx) external view returns (LibPerpetual.GlobalPosition memory);

    function getTraderPosition(uint256 idx, address account) external view returns (LibPerpetual.UserPosition memory);

    function getLpPosition(uint256 idx, address account) external view returns (LibPerpetual.UserPosition memory);

    /* ****************** */
    /*  State modifying   */
    /* ****************** */

    function allowListPerpetual(IPerpetual perp) external;

    function pause() external;

    function unpause() external;

    function sellDust(
        uint256 idx,
        uint256 proposedAmount,
        uint256 minAmount,
        IERC20 token
    ) external;

    function removeInsurance(uint256 amount, IERC20 token) external;

    function deposit(
        uint256 idx,
        uint256 amount,
        IERC20 token
    ) external;

    function withdraw(
        uint256 idx,
        uint256 amount,
        IERC20 token
    ) external;

    function extendPositionWithCollateral(
        uint256 idx,
        uint256 collateralAmount,
        IERC20 token,
        uint256 positionAmount,
        LibPerpetual.Side direction,
        uint256 minAmount
    ) external returns (int256, int256);

    function extendPosition(
        uint256 idx,
        uint256 amount,
        LibPerpetual.Side direction,
        uint256 minAmount
    ) external returns (int256, int256);

    function closePositionWithdrawCollateral(
        uint256 idx,
        uint256 proposedAmount,
        uint256 minAmount,
        IERC20 token
    ) external;

    function reducePosition(
        uint256 idx,
        uint256 reductionRatio,
        uint256 proposedAmount,
        uint256 minAmount
    ) external;

    function liquidate(
        uint256 idx,
        address liquidatee,
        uint256 proposedAmount
    ) external;

    function provideLiquidity(
        uint256 idx,
        uint256 amount,
        IERC20 token
    ) external returns (uint256, uint256);

    function removeLiquidity(
        uint256 idx,
        uint256 liquidityAmountToRemove,
        uint256 reductionRatio,
        uint256 proposedAmount,
        uint256 minAmount,
        IERC20 token
    ) external;
}
