{
  "address": "0x4C4f2bCb91d4663c207706c740097B90367445d4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVBase",
          "name": "_vBase",
          "type": "address"
        },
        {
          "internalType": "contract IVQuote",
          "name": "_vQuote",
          "type": "address"
        },
        {
          "internalType": "contract ICryptoSwap",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "contract IClearingHouse",
          "name": "_clearingHouse",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__AbsInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__DivInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__DivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "timeStamp",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "notional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vBaseAmount",
          "type": "uint256"
        }
      ],
      "name": "DustGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPositive",
          "type": "bool"
        }
      ],
      "name": "FundingPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "timestamp",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "notional",
          "type": "uint256"
        }
      ],
      "name": "LiquidationCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "LiquidityWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "timeStamp",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "notional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "OpenPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "Settlement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vBaseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "TokenDonated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newOracleTwap",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newMarketTwap",
          "type": "int256"
        }
      ],
      "name": "TwapUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TRADE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SENSITIVITY",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWAP_FREQUENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VBASE_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VQUOTE_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tentativeVQuoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "closePosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseDust",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vQuoteAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVBaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vBaseAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVQuoteAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "timeOfLastTrade",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "timeOfLastFunding",
              "type": "uint128"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct LibPerpetual.GlobalPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPerpetual.UserPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketTwap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleTwap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPerpetual.UserPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tentativeVQuoteAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract ICryptoSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCumulativeAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCumulativeAmountAtBeginningOfPeriod",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketTwap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleCumulativeAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleCumulativeAmountAtBeginningOfPeriod",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleTwap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wadAmount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tentativeVQuoteAmount",
          "type": "uint256"
        }
      ],
      "name": "settleAndWithdrawLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateGenericProtocolState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBase",
      "outputs": [
        {
          "internalType": "contract IVBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vQuote",
      "outputs": [
        {
          "internalType": "contract IVQuote",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa41ae5db90098439d292e68fbcbf87103fedc347447d03434165d248c9247331",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0x4C4f2bCb91d4663c207706c740097B90367445d4",
    "transactionIndex": 10,
    "gasUsed": "2605753",
    "logsBloom": "0x
    "blockHash": "0xa5be07d8ea59d590743d3b85124d52e4a6586489b21bb6eb3db8f3ec414315c2",
    "transactionHash": "0xa41ae5db90098439d292e68fbcbf87103fedc347447d03434165d248c9247331",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 30220060,
        "transactionHash": "0xa41ae5db90098439d292e68fbcbf87103fedc347447d03434165d248c9247331",
        "address": "0x457939907dfd28cF59290b0bad4eb6f9744d83Bf",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004c4f2bcb91d4663c207706c740097b90367445d4",
          "0x000000000000000000000000fd9be7281b67a9b2d8a85e83c507a846561e1900"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0xa5be07d8ea59d590743d3b85124d52e4a6586489b21bb6eb3db8f3ec414315c2"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 30220060,
        "transactionHash": "0xa41ae5db90098439d292e68fbcbf87103fedc347447d03434165d248c9247331",
        "address": "0x02B8844089624c8D6d65610a4f5b7947b35d316A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004c4f2bcb91d4663c207706c740097b90367445d4",
          "0x000000000000000000000000fd9be7281b67a9b2d8a85e83c507a846561e1900"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0xa5be07d8ea59d590743d3b85124d52e4a6586489b21bb6eb3db8f3ec414315c2"
      }
    ],
    "blockNumber": 30220060,
    "cumulativeGasUsed": "8887877",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x457939907dfd28cF59290b0bad4eb6f9744d83Bf",
    "0x02B8844089624c8D6d65610a4f5b7947b35d316A",
    "0xFD9bE7281B67A9B2D8A85e83c507a846561E1900",
    "0xfA4A9F6852afD342581F2c59A3c9897C6b090Fa9"
  ],
  "solcInputHash": "5aae07588bd28a3dafa9abd2bee6c482",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVBase\",\"name\":\"_vBase\",\"type\":\"address\"},{\"internalType\":\"contract IVQuote\",\"name\":\"_vQuote\",\"type\":\"address\"},{\"internalType\":\"contract ICryptoSwap\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"contract IClearingHouse\",\"name\":\"_clearingHouse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__AbsInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__DivInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__DivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"timeStamp\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vBaseAmount\",\"type\":\"uint256\"}],\"name\":\"DustGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"}],\"name\":\"FundingPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"LiquidityWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"timeStamp\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"Settlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vBaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"TokenDonated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newOracleTwap\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newMarketTwap\",\"type\":\"int256\"}],\"name\":\"TwapUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TRADE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SENSITIVITY\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAP_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VBASE_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VQUOTE_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tentativeVQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vQuoteAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vBaseAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVQuoteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"timeOfLastTrade\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeOfLastFunding\",\"type\":\"uint128\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct LibPerpetual.GlobalPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPerpetual.UserPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketTwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleTwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPerpetual.UserPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tentativeVQuoteAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract ICryptoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCumulativeAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCumulativeAmountAtBeginningOfPeriod\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketTwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleCumulativeAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleCumulativeAmountAtBeginningOfPeriod\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleTwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wadAmount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tentativeVQuoteAmount\",\"type\":\"uint256\"}],\"name\":\"settleAndWithdrawLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateGenericProtocolState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBase\",\"outputs\":[{\"internalType\":\"contract IVBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vQuote\",\"outputs\":[{\"internalType\":\"contract IVQuote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"closePosition(address,uint256,uint256)\":{\"params\":{\"tentativeVQuoteAmount\":\"Amount of vQuote tokens to be sold for SHORT positions (anything works for LONG position)\"}},\"getExpectedVBaseAmount(uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `openPosition`\"},\"getExpectedVQuoteAmount(uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `openPosition`\"},\"liquidate(address,uint256)\":{\"params\":{\"tentativeVQuoteAmount\":\"Amount of vQuote tokens to be sold for SHORT positions (anything works for LONG position)\"}},\"openPosition(address,uint256,uint8,uint256)\":{\"details\":\"No number for the leverage is given but the amount in the vault must be bigger than MIN_MARGIN_AT_CREATIONNo checks are done if bought amount exceeds allowance\",\"params\":{\"amount\":\"to be sold, in vQuote (if long) or vBase (if short)\"}},\"provideLiquidity(address,uint256)\":{\"params\":{\"account\":\"liquidity provider\",\"wadAmount\":\"amount of vQuote provided with 1e18 precision\"}},\"removeLiquidity(address,uint256)\":{\"params\":{\"amount\":\"of liquidity to be removed from the pool (with 18 decimals)\"}},\"settleAndWithdrawLiquidity(address,uint256)\":{\"params\":{\"tentativeVQuoteAmount\":\"at which to buy the LP position (if it looks like a short, more vQuote than vBase). 18 decimals\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__AbsInputTooSmall()\":[{\"notice\":\"Emitted when the input is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivOverflow(uint256)\":[{\"notice\":\"Emitted when one of the intermediary unsigned results overflows SD59x18.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"closePosition(address,uint256,uint256)\":{\"notice\":\"Closes position from account holder\"},\"getBaseDust()\":{\"notice\":\"TODO: find a way to withdraw the dust\"},\"getExpectedVBaseAmount(uint256)\":{\"notice\":\"Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` (excluding slippage)\"},\"getExpectedVQuoteAmount(uint256)\":{\"notice\":\"Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` (excluding slippage)\"},\"indexPrice()\":{\"notice\":\"Return the current off-chain exchange rate for vBase/vQuote\"},\"marketPrice()\":{\"notice\":\"Return the last traded price (used for TWAP)\"},\"marketPriceOracle()\":{\"notice\":\"Return the curve price oracle\"},\"openPosition(address,uint256,uint8,uint256)\":{\"notice\":\"Open position, long or short\"},\"provideLiquidity(address,uint256)\":{\"notice\":\"Provide liquidity to the pool\"},\"removeLiquidity(address,uint256)\":{\"notice\":\"Remove liquidity from the pool (but don't close LP position and withdraw amount)\"},\"settleAndWithdrawLiquidity(address,uint256)\":{\"notice\":\"Remove liquidity from the pool (but don't close LP position and withdraw amount).Separated from `removeLiquidity` because `tentativeVQuoteAmount` can't guessed at the moment when user calls `removeLiquidity`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Perpetual.sol\":\"Perpetual\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/Perpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// interfaces\\nimport {IPerpetual} from \\\"./interfaces/IPerpetual.sol\\\";\\nimport {ITwapOracle} from \\\"./interfaces/ITwapOracle.sol\\\";\\nimport {IVBase} from \\\"./interfaces/IVBase.sol\\\";\\nimport {IVQuote} from \\\"./interfaces/IVQuote.sol\\\";\\nimport {ICryptoSwap} from \\\"./interfaces/ICryptoSwap.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\nimport {LibPerpetual} from \\\"./lib/LibPerpetual.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Perpetual is IPerpetual, ITwapOracle, Context {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    // parameterization\\n    uint256 public constant TWAP_FREQUENCY = 15 minutes; // time after which funding rate CAN be calculated\\n    uint256 public constant VQUOTE_INDEX = 0;\\n    uint256 public constant VBASE_INDEX = 1;\\n    int256 public constant SENSITIVITY = 1e18; // funding rate sensitivity to price deviations\\n    uint256 public constant MAX_TRADE_SIZE = 5e16; // can trade maximum of 5% of tokens held\\n\\n    // dependencies\\n    IVBase public override vBase;\\n    IVQuote public override vQuote;\\n    IClearingHouse public override clearingHouse;\\n    ICryptoSwap public override market;\\n\\n    // global state\\n    LibPerpetual.GlobalPosition internal globalPosition;\\n    uint256 internal totalLiquidityProvided;\\n    uint256 internal vBaseDust;\\n\\n    int256 public oracleCumulativeAmount;\\n    int256 public oracleCumulativeAmountAtBeginningOfPeriod;\\n    int256 public oracleTwap;\\n\\n    int256 public marketCumulativeAmount;\\n    // slither-disable-next-line similar-names\\n    int256 public marketCumulativeAmountAtBeginningOfPeriod;\\n    int256 public marketTwap;\\n\\n    // user state\\n    mapping(address => LibPerpetual.UserPosition) internal traderPosition;\\n    mapping(address => LibPerpetual.UserPosition) internal lpPosition;\\n\\n    constructor(\\n        IVBase _vBase,\\n        IVQuote _vQuote,\\n        ICryptoSwap _market,\\n        IClearingHouse _clearingHouse\\n    ) {\\n        // TODO: address zero checks\\n        vBase = _vBase;\\n        vQuote = _vQuote;\\n        market = _market;\\n        clearingHouse = _clearingHouse;\\n\\n        // approve all future transfers between Perpetual and market (curve pool)\\n        require(vBase.approve(address(market), type(uint256).max), \\\"NO APPROVAL. TODO: PLZ CHANGE THIS TO DURING CALL\\\");\\n        require(vQuote.approve(address(market), type(uint256).max), \\\"NO APPROVAL\\\");\\n\\n        // can't access immutable variables in the constructor\\n        int256 lastChainlinkPrice = IVBase(_vBase).getIndexPrice();\\n        int256 lastMarketPrice = ICryptoSwap(_market).last_prices().toInt256();\\n\\n        // initialize the oracle\\n        oracleTwap = lastChainlinkPrice;\\n        marketTwap = lastMarketPrice;\\n\\n        globalPosition.timeOfLastTrade = uint128(block.timestamp);\\n        globalPosition.timeOfLastFunding = uint128(block.timestamp);\\n    }\\n\\n    modifier onlyClearingHouse() {\\n        require(msg.sender == address(clearingHouse), \\\"Only clearing house can call this function\\\");\\n        _;\\n    }\\n\\n    ///// TRADING FLOW OPERATIONS \\\\\\\\\\\\\\\\\\\\\\n\\n    /// @notice Open position, long or short\\n    /// @param amount to be sold, in vQuote (if long) or vBase (if short)\\n    /// @dev No number for the leverage is given but the amount in the vault must be bigger than MIN_MARGIN_AT_CREATION\\n    /// @dev No checks are done if bought amount exceeds allowance\\n    function openPosition(\\n        address account,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external override onlyClearingHouse returns (int256, int256) {\\n        /*\\n            if amount > 0\\n\\n                trader goes long EUR\\n                trader accrues openNotional debt\\n                trader receives positionSize assets\\n\\n                openNotional = vQuote traded   to market   ( < 0)\\n                positionSize = vBase received from market ( > 0)\\n\\n            else amount < 0\\n\\n                trader goes short EUR\\n                trader receives openNotional assets\\n                trader accrues positionSize debt\\n\\n                openNotional = vQuote received from market ( > 0)\\n                positionSize = vBase traded   to market   ( < 0)\\n\\n        */\\n\\n        require(amount > 0, \\\"The amount can't be null\\\");\\n        // slither-disable-next-line timestamp // TODO: sounds incorrect\\n        require(\\n            traderPosition[account].openNotional == 0,\\n            \\\"Cannot open a position with one already opened or liquidity provided\\\"\\n        );\\n\\n        updateGenericProtocolState();\\n\\n        // open position\\n        bool isLong = direction == LibPerpetual.Side.Long ? true : false;\\n        (int256 openNotional, int256 positionSize) = _openPosition(amount, isLong, minAmount);\\n\\n        // update position\\n        traderPosition[account] = LibPerpetual.UserPosition({\\n            openNotional: openNotional,\\n            positionSize: positionSize,\\n            cumFundingRate: globalPosition.cumFundingRate,\\n            liquidityBalance: 0\\n        });\\n\\n        return (openNotional, positionSize);\\n    }\\n\\n    function _openPosition(\\n        uint256 amount,\\n        bool isLong,\\n        uint256 minAmount\\n    ) internal returns (int256 openNotional, int256 positionSize) {\\n        /*  if long:\\n                openNotional = vQuote traded   to market   (or \\\"- vQuote\\\")\\n                positionSize = vBase  received from market (or \\\"+ vBase\\\")\\n            if short:\\n                openNotional = vQuote received from market (or \\\"+ vQuote\\\")\\n                positionSize = vBase  traded   to market   (or \\\"- vBase\\\")\\n        */\\n\\n        if (isLong) {\\n            require(_shareTraded(amount, VQUOTE_INDEX) <= MAX_TRADE_SIZE, \\\"Trade size exceeds maximum\\\");\\n            openNotional = -amount.toInt256();\\n            positionSize = _quoteForBase(amount, minAmount).toInt256();\\n        } else {\\n            require(_shareTraded(amount, VBASE_INDEX) <= MAX_TRADE_SIZE, \\\"Trade size exceeds maximum\\\");\\n            openNotional = _baseForQuote(amount, minAmount).toInt256();\\n            positionSize = -amount.toInt256();\\n        }\\n    }\\n\\n    /// @notice Closes position from account holder\\n    /// @param tentativeVQuoteAmount Amount of vQuote tokens to be sold for SHORT positions (anything works for LONG position)\\n    function closePosition(\\n        address account,\\n        uint256 tentativeVQuoteAmount,\\n        uint256 minAmount\\n    ) external override returns (int256) {\\n        /*\\n        after opening the position:\\n\\n            trader has long position:\\n                openNotional = vQuote traded   to market   ( < 0)\\n                positionSize = vBase  received from market ( > 0)\\n            trader has short position\\n                openNotional = vQuote received from market ( > 0)\\n                positionSize = vBase  traded   to market   ( < 0)\\n\\n        to close the position:\\n\\n            trader has long position:\\n                @tentativeVQuoteAmount := can be anything, as it's not used to close LONG position\\n                => User trades the vBase tokens with the curve pool for vQuote tokens\\n\\n            trader has short position:\\n                @tentativeVQuoteAmount := amount of vQuote required to repay the vBase debt (an arbitrary amount)\\n                => User incurred vBase debt when opening a position and must now trade enough\\n                  vQuote with the curve pool to repay his vQuote debt in full.\\n                => Remaining balances can be traded with the market for vQuote.\\n\\n                @audit Note that this mechanism can be exploited by inserting a large value here, since traders\\n                will have to pay transaction fees anyways (on the curve pool).\\n        */\\n        LibPerpetual.UserPosition storage trader = traderPosition[account];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n        require(trader.openNotional != 0, \\\"No position currently opened\\\");\\n\\n        updateGenericProtocolState();\\n\\n        int256 profit = _closePosition(trader, global, tentativeVQuoteAmount, minAmount);\\n\\n        delete traderPosition[account];\\n\\n        return profit;\\n    }\\n\\n    function getUnrealizedPnL(address account) external view override returns (int256) {\\n        LibPerpetual.UserPosition memory trader = traderPosition[account];\\n        int256 poolEURUSDTWAP = getMarketTwap();\\n        int256 vQuoteVirtualProceeds = LibMath.wadMul(trader.positionSize, poolEURUSDTWAP);\\n\\n        // in the case of a LONG, trader.openNotional is negative but vQuoteVirtualProceeds is positive\\n        // in the case of a SHORT, trader.openNotional is positive while vQuoteVirtualProceeds is negative\\n        return trader.openNotional + vQuoteVirtualProceeds;\\n    }\\n\\n    /// @param tentativeVQuoteAmount Amount of vQuote tokens to be sold for SHORT positions (anything works for LONG position)\\n    function liquidate(address liquidatee, uint256 tentativeVQuoteAmount) external onlyClearingHouse returns (int256) {\\n        updateGenericProtocolState();\\n\\n        // load information about state\\n        LibPerpetual.UserPosition storage trader = traderPosition[liquidatee];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n\\n        int256 profit = _closePosition(trader, global, tentativeVQuoteAmount, 0);\\n\\n        return profit;\\n    }\\n\\n    ///// LIQUIDITY PROVISIONING FLOW OPERATIONS \\\\\\\\\\\\\\\\\\\\\\n\\n    /// @notice Provide liquidity to the pool\\n    /// @param account liquidity provider\\n    /// @param  wadAmount amount of vQuote provided with 1e18 precision\\n    function provideLiquidity(address account, uint256 wadAmount)\\n        external\\n        override\\n        onlyClearingHouse\\n        returns (uint256)\\n    {\\n        // slither-disable-next-line timestamp // TODO: sounds incorrect\\n        require(wadAmount != 0, \\\"Zero amount\\\");\\n        // slither-disable-next-line timestamp // TODO: sounds incorrect\\n        require(lpPosition[account].liquidityBalance == 0, \\\"Has provided liquidity before\\\"); // TODO: can we loosen this restriction (must settle funding!)\\n\\n        uint256 basePrice;\\n        if (totalLiquidityProvided == 0) {\\n            basePrice = marketPrice();\\n\\n            // note: To start the pool we first have to update the funding rate oracle!\\n            updateGenericProtocolState();\\n        } else {\\n            basePrice = LibMath.wadDiv(market.balances(0), market.balances(1));\\n        }\\n        uint256 baseAmount = LibMath.wadDiv(wadAmount, basePrice); // vQuote / vBase/vQuote  <=> 1 / 1.2 = 0.83\\n\\n        // supply liquidity to curve pool\\n        vQuote.mint(wadAmount);\\n        vBase.mint(baseAmount);\\n        //uint256 min_mint_amount = 0; // set to zero for now\\n        uint256 liquidity = market.add_liquidity([wadAmount, baseAmount], 0); //  first token in curve pool is vQuote & second token is vBase\\n\\n        // update balances\\n        lpPosition[account] = LibPerpetual.UserPosition({\\n            openNotional: -wadAmount.toInt256(),\\n            positionSize: -baseAmount.toInt256(),\\n            cumFundingRate: globalPosition.cumFundingRate,\\n            liquidityBalance: liquidity\\n        });\\n        totalLiquidityProvided += liquidity;\\n\\n        return baseAmount;\\n    }\\n\\n    /// @notice Remove liquidity from the pool (but don't close LP position and withdraw amount)\\n    /// @param amount of liquidity to be removed from the pool (with 18 decimals)\\n    function removeLiquidity(address account, uint256 amount) external override onlyClearingHouse {\\n        // TODO: should we just hardcode amount here?\\n        LibPerpetual.UserPosition storage lp = lpPosition[account];\\n\\n        // slither-disable-next-line incorrect-equality\\n        require(amount <= lp.liquidityBalance, \\\"Not enough liquidity provided\\\"); //TODO: can we loosen this?\\n\\n        // lower balances\\n        lp.liquidityBalance -= amount;\\n        totalLiquidityProvided -= amount;\\n\\n        // remove liquidity from curve pool\\n        uint256 baseAmount;\\n        uint256 quoteAmount;\\n        {\\n            // to avoid stack to deep errors\\n            uint256 vQuoteBalanceBefore = vQuote.balanceOf(address(this)); // can we just assume 0 here? NO!\\n            uint256 vBaseBalanceBefore = vBase.balanceOf(address(this));\\n\\n            market.remove_liquidity(amount, [uint256(0), uint256(0)]);\\n\\n            require(vQuote.balanceOf(address(market)) > 0, \\\"You broke the market\\\");\\n            require(vBase.balanceOf(address(market)) > 0, \\\"You broke the market\\\");\\n\\n            uint256 vQuoteBalanceAfter = vQuote.balanceOf(address(this));\\n            uint256 vBaseBalanceAfter = vBase.balanceOf(address(this));\\n\\n            quoteAmount = vQuoteBalanceAfter - vQuoteBalanceBefore;\\n            baseAmount = vBaseBalanceAfter - vBaseBalanceBefore;\\n\\n            vQuote.burn(quoteAmount);\\n            vBase.burn(baseAmount);\\n        }\\n\\n        // add the amounts received from the pool\\n        lp.openNotional += quoteAmount.toInt256();\\n        lp.positionSize += baseAmount.toInt256();\\n    }\\n\\n    /// @notice Remove liquidity from the pool (but don't close LP position and withdraw amount).\\n    /// @notice Separated from `removeLiquidity` because `tentativeVQuoteAmount` can't guessed at the moment when user calls `removeLiquidity`\\n    /// @param tentativeVQuoteAmount at which to buy the LP position (if it looks like a short, more vQuote than vBase). 18 decimals\\n    function settleAndWithdrawLiquidity(address account, uint256 tentativeVQuoteAmount)\\n        external\\n        override\\n        onlyClearingHouse\\n        returns (int256 profit)\\n    {\\n        LibPerpetual.UserPosition storage lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n\\n        updateGenericProtocolState();\\n\\n        // profit = pnl + fundingPayments\\n        profit = _closePosition(lp, global, tentativeVQuoteAmount, 0);\\n\\n        delete lpPosition[account];\\n    }\\n\\n    ///// COMMON OPERATIONS \\\\\\\\\\\\\\\\\\\\\\n\\n    function _updateFundingRate() internal {\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n        uint256 currentTime = block.timestamp;\\n\\n        int256 marketTWAP = getMarketTwap();\\n        int256 indexTWAP = getOracleTwap();\\n\\n        // console.log(\\\"marketTWAP: twapOracle\\\");\\n        // console.logInt(marketTWAP);\\n\\n        // console.log(\\\"indexTWAP: twapOracle\\\");\\n        // console.logInt(indexTWAP);\\n\\n        // console.log(\\\"marketTWAP: poolTWAPOracle\\\");\\n        // console.logInt(poolTWAPOracle.getEURUSDTWAP());\\n\\n        // console.log(\\\"indexTWAP: chainlinkTWAPOracle\\\");\\n        // console.logInt(chainlinkTWAPOracle.getEURUSDTWAP());\\n\\n        int256 currentTraderPremium = LibMath.wadDiv(marketTWAP - indexTWAP, indexTWAP);\\n        int256 timePassedSinceLastTrade = (currentTime - global.timeOfLastTrade).toInt256();\\n        int256 weightedTradePremiumOverLastPeriod = timePassedSinceLastTrade * currentTraderPremium;\\n\\n        global.cumFundingRate +=\\n            (LibMath.wadMul(SENSITIVITY, weightedTradePremiumOverLastPeriod) * timePassedSinceLastTrade) /\\n            1 days;\\n\\n        global.timeOfLastTrade = uint128(currentTime);\\n    }\\n\\n    /// @notice Applies the funding payments on the profit\\n    function _settleFundingRate(LibPerpetual.UserPosition storage user, LibPerpetual.GlobalPosition storage global)\\n        internal\\n        returns (int256 upcomingFundingPayment)\\n    {\\n        if (user.openNotional != 0) {\\n            // update user variables when position opened before last update\\n            upcomingFundingPayment = _getFundingPayments(user, global);\\n            emit Settlement(_msgSender(), upcomingFundingPayment);\\n        }\\n\\n        user.cumFundingRate = global.cumFundingRate;\\n    }\\n\\n    function getFundingPayments(address account) external view override returns (int256) {\\n        LibPerpetual.UserPosition memory user = traderPosition[account];\\n        LibPerpetual.GlobalPosition memory global = globalPosition;\\n        return _getFundingPayments(user, global);\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    // slither-disable-next-line timestamp\\n    function _getFundingPayments(LibPerpetual.UserPosition memory user, LibPerpetual.GlobalPosition memory global)\\n        internal\\n        pure\\n        returns (int256 upcomingFundingPayment)\\n    {\\n        /* Funding rates (as defined in our protocol) are paid from longs to shorts\\n\\n            case 1: user is long  => has missed making funding payments (positive or negative)\\n            case 2: user is short => has missed receiving funding payments (positive or negative)\\n\\n            comment: Making an negative funding payment is equivalent to receiving a positive one.\\n        */\\n        int256 upcomingFundingRate = 0;\\n\\n        bool isLong = user.positionSize > 0 ? true : false;\\n        // slither-disable-next-line timestamp\\n        if (user.cumFundingRate != global.cumFundingRate) {\\n            if (isLong) {\\n                upcomingFundingRate = user.cumFundingRate - global.cumFundingRate;\\n            } else {\\n                upcomingFundingRate = global.cumFundingRate - user.cumFundingRate;\\n            }\\n            // fundingPayments = fundingRate * openNotional\\n            upcomingFundingPayment = LibMath.wadMul(upcomingFundingRate, LibMath.abs(user.openNotional));\\n        }\\n        return upcomingFundingPayment;\\n    }\\n\\n    function updateGenericProtocolState() public {\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n        uint256 currentTime = block.timestamp;\\n        uint256 timeOfLastTrade = uint256(global.timeOfLastTrade);\\n\\n        // Don't update the state more than once per block\\n        // slither-disable-next-line timestamp\\n        if (currentTime > timeOfLastTrade) {\\n            updateTwap();\\n            _updateFundingRate();\\n        }\\n    }\\n\\n    function updateTwap() public override {\\n        uint256 currentTime = block.timestamp;\\n        int256 timeElapsed = (currentTime - globalPosition.timeOfLastTrade).toInt256();\\n\\n        /*\\n            priceCumulative1 = priceCumulative0 + price1 * timeElapsed\\n        */\\n\\n        // update cumulative chainlink price feed\\n        int256 latestChainlinkPrice = indexPrice();\\n        oracleCumulativeAmount = oracleCumulativeAmount + latestChainlinkPrice * timeElapsed;\\n\\n        // update cumulative market price feed\\n        int256 latestMarketPrice = marketPrice().toInt256();\\n        marketCumulativeAmount = marketCumulativeAmount + latestMarketPrice * timeElapsed;\\n\\n        uint256 timeElapsedSinceBeginningOfPeriod = block.timestamp - globalPosition.timeOfLastFunding;\\n\\n        // slither-disable-next-line timestamp\\n        if (timeElapsedSinceBeginningOfPeriod >= TWAP_FREQUENCY) {\\n            /*\\n                TWAP = (priceCumulative1 - priceCumulative0) / timeElapsed\\n            */\\n\\n            // calculate chainlink twap\\n            oracleTwap =\\n                (oracleCumulativeAmount - oracleCumulativeAmountAtBeginningOfPeriod) /\\n                timeElapsedSinceBeginningOfPeriod.toInt256();\\n\\n            // calculate market twap\\n            marketTwap =\\n                (marketCumulativeAmount - marketCumulativeAmountAtBeginningOfPeriod) /\\n                timeElapsedSinceBeginningOfPeriod.toInt256();\\n\\n            // reset cumulative amount and timestamp\\n            oracleCumulativeAmountAtBeginningOfPeriod = oracleCumulativeAmount;\\n            marketCumulativeAmountAtBeginningOfPeriod = marketCumulativeAmount;\\n            globalPosition.timeOfLastFunding = uint128(block.timestamp);\\n\\n            emit TwapUpdated(block.timestamp, oracleTwap, marketTwap);\\n        }\\n    }\\n\\n    /// @dev Used both by traders closing their own positions and liquidators liquidating other people's positions\\n    /// @notice profit is the sum of funding payments and the position PnL\\n    // slither-disable-next-line timestamp // TODO: sounds incorrect\\n    function _closePosition(\\n        LibPerpetual.UserPosition storage user,\\n        LibPerpetual.GlobalPosition storage global,\\n        uint256 tentativeVQuoteAmount,\\n        uint256 minAmount\\n    ) internal returns (int256 profit) {\\n        bool isShort = user.positionSize < 0 ? true : false;\\n        if (isShort) {\\n            // check that `tentativeVQuoteAmount` isn't too far from the value in the market\\n            // to avoid creating large swings in the market (even though these swings would be cancelled out\\n            // by the fact that we sell any extra vBase bought)\\n            int256 marketEURUSDTWAP = getMarketTwap();\\n            // USD_amount = EUR_USD * EUR_amount\\n            int256 positivePositionSize = -user.positionSize;\\n            int256 reasonableVQuoteAmount = LibMath.wadMul(marketEURUSDTWAP, positivePositionSize);\\n\\n            int256 deviation = LibMath.wadDiv(\\n                LibMath.abs(tentativeVQuoteAmount.toInt256() - reasonableVQuoteAmount),\\n                reasonableVQuoteAmount\\n            );\\n\\n            // Allow for a 50% deviation from the market vQuote TWAP price to close this position\\n            require(deviation < 5e17, \\\"Amount submitted too far from the market price of the position\\\");\\n        }\\n\\n        // update profit using funding payment info in the `global` struct\\n        profit += _settleFundingRate(user, global);\\n\\n        // pnL of the position\\n        profit += _closePositionOnMarket(user.positionSize, tentativeVQuoteAmount, minAmount) + user.openNotional;\\n    }\\n\\n    function _canSellBase(uint256 sellAmount) internal returns (bool) {\\n        // slither-disable-next-line unused-return\\n        try market.get_dy(VBASE_INDEX, VQUOTE_INDEX, sellAmount) {\\n            return true;\\n        } catch {\\n            emit Log(\\\"Swap impossible\\\");\\n\\n            return false;\\n        }\\n    }\\n\\n    /// TODO: find a way to withdraw the dust\\n    function getBaseDust() external view returns (uint256) {\\n        return vBaseDust;\\n    }\\n\\n    /// @param tentativeVQuoteAmount arbitrary value, hopefully, big enough to be able to close the short position\\n    function _closePositionOnMarket(\\n        int256 positionSize,\\n        uint256 tentativeVQuoteAmount,\\n        uint256 minAmount\\n    ) internal returns (int256 vQuoteProceeds) {\\n        bool isLong = positionSize > 0 ? true : false;\\n        uint256 position = isLong ? positionSize.toUint256() : (-positionSize).toUint256();\\n        if (isLong) {\\n            uint256 amount = _baseForQuote(position, minAmount);\\n            vQuoteProceeds = amount.toInt256();\\n        } else {\\n            uint256 vBaseProceeds = _quoteForBase(tentativeVQuoteAmount, minAmount);\\n\\n            require(vBaseProceeds >= position, \\\"Not enough returned, proposed amount too low\\\");\\n\\n            // have to sell remaining tokens\\n            uint256 baseRemaining = vBaseProceeds - position;\\n            uint256 additionalProceeds = 0;\\n            if (baseRemaining > 0) {\\n                if (_canSellBase(baseRemaining)) {\\n                    additionalProceeds = _baseForQuote(baseRemaining, 0);\\n                } else {\\n                    // dust vBase balance can not be sold\\n                    emit DustGenerated(baseRemaining);\\n                    vBaseDust += baseRemaining;\\n                }\\n            }\\n            // sell all remaining tokens\\n            vQuoteProceeds = -tentativeVQuoteAmount.toInt256() + additionalProceeds.toInt256();\\n        }\\n    }\\n\\n    function _shareTraded(uint256 sellAmount, uint256 sellIndex) internal view returns (uint256) {\\n        return LibMath.wadDiv(sellAmount, market.balances(sellIndex));\\n    }\\n\\n    function _quoteForBase(uint256 quoteAmount, uint256 minAmount) internal returns (uint256) {\\n        // slither-disable-next-line unused-return\\n        vQuote.mint(quoteAmount);\\n        uint256 vBaseReceived = market.exchange(VQUOTE_INDEX, VBASE_INDEX, quoteAmount, minAmount);\\n        vBase.burn(vBaseReceived);\\n        return vBaseReceived;\\n    }\\n\\n    function _baseForQuote(uint256 baseAmount, uint256 minAmount) internal returns (uint256) {\\n        // slither-disable-next-line unused-retur\\n        vBase.mint(baseAmount);\\n        uint256 vQuoteReceived = market.exchange(VBASE_INDEX, VQUOTE_INDEX, baseAmount, minAmount);\\n        vQuote.burn(vQuoteReceived);\\n        return vQuoteReceived;\\n    }\\n\\n    /// @notice Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `openPosition`\\n    function getExpectedVBaseAmount(uint256 vQuoteAmountToSpend) external view override returns (uint256) {\\n        return market.get_dy(VQUOTE_INDEX, VBASE_INDEX, vQuoteAmountToSpend);\\n    }\\n\\n    /// @notice Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `openPosition`\\n    function getExpectedVQuoteAmount(uint256 vBaseAmountToSpend) external view override returns (uint256) {\\n        return market.get_dy(VBASE_INDEX, VQUOTE_INDEX, vBaseAmountToSpend);\\n    }\\n\\n    /// @notice Return the curve price oracle\\n    function marketPriceOracle() external view override returns (uint256) {\\n        return market.price_oracle();\\n    }\\n\\n    /// @notice Return the last traded price (used for TWAP)\\n    function marketPrice() public view override returns (uint256) {\\n        return market.last_prices();\\n    }\\n\\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\\n    function indexPrice() public view override returns (int256) {\\n        return vBase.getIndexPrice();\\n    }\\n\\n    function getGlobalPosition() external view override returns (LibPerpetual.GlobalPosition memory) {\\n        return globalPosition;\\n    }\\n\\n    function getTraderPosition(address account) external view override returns (LibPerpetual.UserPosition memory) {\\n        return traderPosition[account];\\n    }\\n\\n    function getLpPosition(address account) external view override returns (LibPerpetual.UserPosition memory) {\\n        return lpPosition[account];\\n    }\\n\\n    function getOracleTwap() public view override returns (int256) {\\n        return oracleTwap;\\n    }\\n\\n    function getMarketTwap() public view override returns (int256) {\\n        return marketTwap;\\n    }\\n}\\n\",\"keccak256\":\"0xfda587ac5f6a2bba6110926a5fba67d857a54e277be9268ebc7361c534ef25c4\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);\\n    event Deposit(uint256 idx, address indexed user, address indexed asset, uint256 amount);\\n    event Withdraw(uint256 idx, address indexed user, address indexed asset, uint256 amount);\\n    event Settlement(uint256 idx, address indexed user, int256 amount);\\n    event OpenPosition(\\n        uint256 idx,\\n        address indexed user,\\n        uint128 indexed timeStamp,\\n        LibPerpetual.Side direction,\\n        int256 notional,\\n        int256 amount\\n    );\\n    event ClosePosition(\\n        uint256 idx,\\n        address indexed user,\\n        uint128 indexed timeStamp,\\n        LibPerpetual.Side direction,\\n        int256 notional,\\n        int256 amount\\n    );\\n    event LiquidationCall(\\n        uint256 idx,\\n        address indexed liquidatee,\\n        address indexed liquidator,\\n        uint128 timestamp,\\n        uint256 notional\\n    );\\n    event FundingPayment(uint256 idx, uint256 indexed blockNumber, uint256 value, bool isPositive);\\n    event LiquidityProvided(uint256 idx, address indexed liquidityProvider, address indexed asset, uint256 amount);\\n    event LiquidityRemoved(uint256 idx, address indexed liquidityProvider, uint256 amount);\\n    event LiquidityWithdrawn(uint256 idx, address indexed liquidityProvider);\\n    event Log(string errorMessage);\\n}\\n\",\"keccak256\":\"0x9471f79ca195af6df03077438610f530a5f8dfee492f482eb8bcfe433f29024a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd3f8e0d4e2c5d5f748cd3f4812354eee1c571881fe6ceba6b84ebc692aa94516\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\ninterface IInsurance {\\n    function settleDebt(uint256 amount) external;\\n\\n    function withdrawRemainder() external;\\n}\\n\",\"keccak256\":\"0x0f82ab39380bcae70473a6b7fe3c9642479ca48bbc8c453ae7d7d1e38feb1a96\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    event Settlement(address indexed user, int256 amount);\\n    event OpenPosition(\\n        address indexed user,\\n        uint128 indexed timeStamp,\\n        LibPerpetual.Side direction,\\n        int256 notional,\\n        int256 amount\\n    );\\n    event ClosePosition(\\n        address indexed user,\\n        uint128 indexed timeStamp,\\n        LibPerpetual.Side direction,\\n        int256 notional,\\n        int256 amount\\n    );\\n    event LiquidationCall(address indexed liquidatee, address indexed liquidator, uint128 timestamp, uint256 notional);\\n    event FundingPayment(uint256 indexed blockNumber, uint256 value, bool isPositive);\\n    event LiquidityProvided(address indexed liquidityProvider, address indexed asset, uint256 amount);\\n    event LiquidityRemoved(address indexed liquidityProvider, uint256 amount);\\n    event LiquidityWithdrawn(address indexed liquidityProvider);\\n    event Log(string errorMessage);\\n    event TokenDonated(address indexed burner, uint256 vBaseAmount, uint256 liquidity);\\n    event DustGenerated(uint256 vBaseAmount);\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    // buy/ sell functions\\n\\n    function openPosition(\\n        address account,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external returns (int256, int256);\\n\\n    function closePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external returns (int256);\\n\\n    // user position function\\n    function getTraderPosition(address account) external view returns (LibPerpetual.UserPosition memory);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.UserPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getFundingPayments(address account) external view returns (int256);\\n\\n    // liquidator provider functions\\n    function provideLiquidity(address account, uint256 wadAmount) external returns (uint256);\\n\\n    function removeLiquidity(address account, uint256 amount) external;\\n\\n    function settleAndWithdrawLiquidity(address account, uint256 tentativeVQuoteAmount) external returns (int256);\\n\\n    // price getter\\n    function getExpectedVBaseAmount(uint256 vQuoteAmountToSpend) external view returns (uint256);\\n\\n    function getExpectedVQuoteAmount(uint256 vBaseAmountToSpend) external view returns (uint256);\\n\\n    function marketPriceOracle() external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x253a49dee8594d2c07f31f29dd0598556ec9835847ba9df29a4f7fe864f946ee\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\ninterface ITwapOracle {\\n    // events\\n    event TwapUpdated(uint256 timeStamp, int256 newOracleTwap, int256 newMarketTwap);\\n\\n    // state changing functions\\n\\n    function updateTwap() external;\\n\\n    // getter\\n\\n    function getOracleTwap() external view returns (int256);\\n\\n    function getMarketTwap() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xd5fdaf30edd3e43f1b4b0fb046c0359bc0bfb95b59b1ba906ced412af7151fa2\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    function getIndexPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x4990fe37453479fcbf78ea671489421f1c2912936f2f6a66bc8d188399268add\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0xf3c21b1973b431c9e0fd63e60544be3e5a7e51bfb4d6f8b4dbac26f38dc3f17b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// @dev: deposit uint and withdraw int\\n// @author: The interface used in other contracts\\ninterface IVault {\\n    // Event\\n    event BadDebtGenerated(uint256 idx, address beneficiary, uint256 amount);\\n\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    event MaxTVLChanged(uint256 newMaxTVL);\\n\\n    // dependencies\\n    function reserveToken() external view returns (IERC20);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    // state modifying functions\\n    function deposit(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20 token\\n    ) external returns (uint256);\\n\\n    function withdrawAll(\\n        uint256 idx,\\n        address user,\\n        IERC20 withdrawToken\\n    ) external returns (uint256);\\n\\n    function settleProfit(\\n        uint256 idx,\\n        address user,\\n        int256 amount\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20 token\\n    ) external returns (uint256);\\n\\n    // viewer functions\\n    function getReserveTokenDecimals() external view returns (uint256);\\n\\n    function getTotalReserveToken() external view returns (uint256);\\n\\n    function getBadDebt() external view returns (uint256);\\n\\n    function getMaxTVL() external view returns (uint256);\\n\\n    function getReserveValue(uint256 idx, address account) external view returns (int256);\\n\\n    function getBalance(uint256 idx, address user) external view returns (int256);\\n}\\n\",\"keccak256\":\"0xb4cb62906376554a2fc7faaf81f39f8bac3fb66be6595c00369757809499c9d3\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICryptoSwap} from \\\"../interfaces/ICryptoSwap.sol\\\";\\nimport {IPerpetual} from \\\"../interfaces/IPerpetual.sol\\\";\\n\\ninterface IVirtualToken is IERC20, IERC20Metadata {\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xff3033460e00c535a4cb6b4f78e15e7026453bffa58fcf22b7e70f20e508aec5\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a EUR positions and want to get the equivalent USD amount\\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    uint256 public constant POSITIVE_INT256_MAX = uint256(type(int256).max);\\n\\n    // safe casting\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // wad division\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    // wad multiplication\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // wad division\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n\\n    // wad multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0x1cb7522369fe8439464fd56ab17fd74269f9e3173f14f4d08b97c48c84e94780\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        Long,\\n        Short\\n    }\\n\\n    struct UserPosition {\\n        int256 openNotional; // vQuote\\n        int256 positionSize; // vBase\\n        int256 cumFundingRate;\\n        uint256 liquidityBalance; // LP token amount (traders don't use it)\\n    }\\n\\n    struct GlobalPosition {\\n        uint128 timeOfLastTrade;\\n        uint128 timeOfLastFunding;\\n        int256 cumFundingRate;\\n    }\\n}\\n\",\"keccak256\":\"0xc3efbfb0a2994d1a2f9fd6e6b91e3637b3093b77a349bf8bb0bb7049ae5d6735\",\"license\":\"AGPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e0e38038062002e0e8339810160408190526200003491620003fa565b600080546001600160a01b03199081166001600160a01b03878116918217909355600180548316878516179055600380548316868516908117909155600280549093169385169390931790915560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b390604401602060405180830381600087803b158015620000c357600080fd5b505af1158015620000d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fe9190620003d1565b6200016a5760405162461bcd60e51b815260206004820152603160248201527f4e4f20415050524f56414c2e20544f444f3a20504c5a204348414e47452054486044820152701254c81513c8111554925391c810d05313607a1b60648201526084015b60405180910390fd5b60015460035460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015620001bc57600080fd5b505af1158015620001d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f79190620003d1565b620002335760405162461bcd60e51b815260206004820152600b60248201526a1393c81054141493d5905360aa1b604482015260640162000161565b6000846001600160a01b03166358c0994a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200026f57600080fd5b505afa15801562000284573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002aa919062000461565b9050600062000338846001600160a01b031663c146bf946040518163ffffffff1660e01b815260040160206040518083038186803b158015620002ec57600080fd5b505afa15801562000301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000327919062000461565b6200036160201b620017de1760201c565b600a9290925550600d5550505050426001600160801b0316600160801b81021760045562000493565b60006001600160ff1b03821115620003cd5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840162000161565b5090565b600060208284031215620003e3578081fd5b81518015158114620003f3578182fd5b9392505050565b6000806000806080858703121562000410578283fd5b84516200041d816200047a565b602086015190945062000430816200047a565b604086015190935062000443816200047a565b606086015190925062000456816200047a565b939692955090935050565b60006020828403121562000473578081fd5b5051919050565b6001600160a01b03811681146200049057600080fd5b50565b61296b80620004a36000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80638516e6dc11610125578063bad5e0e6116100ad578063cefc49931161007c578063cefc499314610487578063d57ba73c1461049a578063db884c0d146104a2578063dd027c1c146104aa578063f7d245da146104b357600080fd5b8063bad5e0e614610450578063bcbaf48714610458578063bf02e92f1461046b578063c5f1916c1461047457600080fd5b8063a201ccf6116100f4578063a201ccf61461040a578063a42d8b6b1461041d578063acdb520814610430578063b0aae7231461043e578063b888a8791461044757600080fd5b80638516e6dc146103855780639027b59e1461038f5780639b497ec8146103f8578063a1c5a4901461040157600080fd5b80635fea6120116101a85780637532792d116101775780637532792d14610302578063793962d8146103155780637a8f15eb1461035b5780637f564fea1461036a57806380f556051461037257600080fd5b80635fea6120146102cc57806360551d5f146102df5780636eea8dab146102e7578063704a0c70146102fa57600080fd5b806345a15388116101ef57806345a15388146102785780634bc36bd6146102805780634fa9c4db14610293578063508fbda6146102a6578063544305bf146102b957600080fd5b80630af968001461022157806310bace8c14610251578063214c302e146102675780632fda593c1461026f575b600080fd5b600254610234906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102596104db565b604051908152602001610248565b600754610259565b610259600c5481565b610259610567565b600154610234906001600160a01b031681565b6102596102a1366004612695565b6105ac565b6102596102b436600461260a565b61066a565b6102596102c736600461260a565b6106f6565b6102596102da366004612624565b610773565b610259610b76565b6102596102f5366004612624565b610bbb565b610259600181565b6102596103103660046126df565b610c4e565b61032861032336600461260a565b610cda565b60405161024891908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b610259670de0b6b3a764000081565b600a54610259565b600354610234906001600160a01b031681565b61038d610d53565b005b60408051606080820183526000808352602080840182905292840152825180820184526004546001600160801b03808216808452600160801b90920481168386019081526005549387019384528651928352511693810193909352519282019290925201610248565b610259600d5481565b61025960095481565b61038d610418366004612624565b610eb7565b61025961042b3660046126df565b6114a2565b61025966b1a2bc2ec5000081565b61025960085481565b610259600b5481565b61038d6114e2565b610259610466366004612624565b61150e565b610259600a5481565b600054610234906001600160a01b031681565b61032861049536600461260a565b611575565b600d54610259565b610259600081565b61025961038481565b6104c66104c136600461264d565b6115ee565b60408051928352602083019190915201610248565b60008060009054906101000a90046001600160a01b03166001600160a01b03166358c0994a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561052a57600080fd5b505afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056291906126c7565b905090565b60035460408051633051afe560e21b815290516000926001600160a01b03169163c146bf94916004808301926020929190829003018186803b15801561052a57600080fd5b6001600160a01b0383166000908152600e60205260408120805460049061061a5760405162461bcd60e51b815260206004820152601c60248201527f4e6f20706f736974696f6e2063757272656e746c79206f70656e65640000000060448201526064015b60405180910390fd5b6106226114e2565b60006106308383888861184c565b6001600160a01b0388166000908152600e6020526040812081815560018101829055600281018290556003015593505050505b9392505050565b6001600160a01b0381166000908152600e60209081526040808320815160808101835281548152600182015481850152600282015481840152600390910154606080830191909152825190810183526004546001600160801b038082168352600160801b909104169381019390935260055491830191909152906106ee8282611983565b949350505050565b6001600160a01b0381166000908152600e6020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015281610748600d5490565b9050600061075a836020015183611a0b565b835190915061076a908290612799565b95945050505050565b6002546000906001600160a01b031633146107a05760405162461bcd60e51b81526004016106119061273b565b816107db5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610611565b6001600160a01b0383166000908152600f6020526040902060030154156108445760405162461bcd60e51b815260206004820152601d60248201527f4861732070726f7669646564206c6971756964697479206265666f72650000006044820152606401610611565b60006006546000141561086857610859610567565b90506108636114e2565b61096b565b600354604051634903b0d160e01b815260006004820152610968916001600160a01b031690634903b0d19060240160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906126c7565b600354604051634903b0d160e01b8152600160048201526001600160a01b0390911690634903b0d1906024015b60206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096391906126c7565b611a17565b90505b60006109778483611a17565b60015460405163140e25ad60e31b8152600481018790529192506001600160a01b03169063a0712d6890602401600060405180830381600087803b1580156109be57600080fd5b505af11580156109d2573d6000803e3d6000fd5b505060005460405163140e25ad60e31b8152600481018590526001600160a01b03909116925063a0712d689150602401600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b5050600354604080518082018252888152602081018690529051630b4c7e4d60e01b8152600094506001600160a01b039092169250630b4c7e4d91610a7a91908590600401612720565b602060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc91906126c7565b90506040518060800160405280610ae2876117de565b610aeb90612905565b8152602001610af9846117de565b610b0290612905565b815260055460208083019190915260409182018490526001600160a01b0389166000908152600f82528281208451815591840151600183015591830151600282015560609092015160039092019190915560068054839290610b659084906127da565b909155509193505050505b92915050565b600354604080516386fc88d360e01b815290516000926001600160a01b0316916386fc88d3916004808301926020929190829003018186803b15801561052a57600080fd5b6002546000906001600160a01b03163314610be85760405162461bcd60e51b81526004016106119061273b565b6001600160a01b0383166000908152600f602052604090206004610c0a6114e2565b610c17828286600061184c565b6001600160a01b039095166000908152600f6020526040812081815560018101829055600281018290556003015550929392505050565b60035460405163556d6e9f60e01b81526000600482018190526001602483015260448201849052916001600160a01b03169063556d6e9f906064015b60206040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7091906126c7565b610d056040518060800160405280600081526020016000815260200160008152602001600081525090565b506001600160a01b03166000908152600e6020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b6004544290600090610d7790610d72906001600160801b0316846128ee565b6117de565b90506000610d836104db565b9050610d8f828261282c565b600854610d9c9190612799565b6008556000610dac610d72610567565b9050610db8838261282c565b600b54610dc59190612799565b600b55600454600090610de890600160801b90046001600160801b0316426128ee565b90506103848110610eb057610dfc816117de565b600954600854610e0c91906128af565b610e1691906127f2565b600a55610e22816117de565b600c54600b54610e3291906128af565b610e3c91906127f2565b600d819055600854600955600b54600c55600480546001600160801b03908116600160801b429283160217909155600a546040805192835260208301919091528101919091527f2da2327ef0b8399af5cbcc8efd04003d712631ecc4c1eb11231cc6d840f5275e9060600160405180910390a15b5050505050565b6002546001600160a01b03163314610ee15760405162461bcd60e51b81526004016106119061273b565b6001600160a01b0382166000908152600f602052604090206003810154821115610f4d5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f756768206c69717569646974792070726f76696465640000006044820152606401610611565b81816003016000828254610f6191906128ee565b925050819055508160066000828254610f7a91906128ee565b90915550506001546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b158015610fc757600080fd5b505afa158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff91906126c7565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906126c7565b6003546040805180820182526000808252602082015290516316cd8e2760e21b81529293506001600160a01b0390911691635b36389c916110c6918a9190600401612785565b600060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b50506001546003546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a082319060240160206040518083038186803b15801561114257600080fd5b505afa158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a91906126c7565b116111be5760405162461bcd60e51b8152602060048201526014602482015273165bdd48189c9bdad9481d1a19481b585c9ad95d60621b6044820152606401610611565b600080546003546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e91906126c7565b116112825760405162461bcd60e51b8152602060048201526014602482015273165bdd48189c9bdad9481d1a19481b585c9ad95d60621b6044820152606401610611565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156112c657600080fd5b505afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe91906126c7565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b15801561134757600080fd5b505afa15801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f91906126c7565b905061138b84836128ee565b945061139783826128ee565b600154604051630852cd8d60e31b8152600481018890529197506001600160a01b0316906342966c6890602401600060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b5050600054604051630852cd8d60e31b8152600481018a90526001600160a01b0390911692506342966c689150602401600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b5050505050505050611461816117de565b8360000160008282546114749190612799565b909155506114839050826117de565b8360010160008282546114969190612799565b90915550505050505050565b60035460405163556d6e9f60e01b81526001600482015260006024820181905260448201849052916001600160a01b03169063556d6e9f90606401610c8a565b6004805442906001600160801b03168082111561150957611501610d53565b611509611a23565b505050565b6002546000906001600160a01b0316331461153b5760405162461bcd60e51b81526004016106119061273b565b6115436114e2565b6001600160a01b0383166000908152600e602052604081209060049061156b8383878461184c565b9695505050505050565b6115a06040518060800160405280600081526020016000815260200160008152602001600081525090565b506001600160a01b03166000908152600f6020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b60025460009081906001600160a01b0316331461161d5760405162461bcd60e51b81526004016106119061273b565b6000851161166d5760405162461bcd60e51b815260206004820152601860248201527f54686520616d6f756e742063616e2774206265206e756c6c00000000000000006044820152606401610611565b6001600160a01b0386166000908152600e6020526040902054156117075760405162461bcd60e51b8152602060048201526044602482018190527f43616e6e6f74206f70656e206120706f736974696f6e2077697468206f6e6520908201527f616c7265616479206f70656e6564206f72206c69717569646974792070726f766064820152631a59195960e21b608482015260a401610611565b61170f6114e2565b60008085600181111561173257634e487b7160e01b600052602160045260246000fd5b1461173e576000611741565b60015b9050600080611751888488611af0565b91509150604051806080016040528083815260200182815260200160046001015481526020016000815250600e60008b6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505081819450945050505094509492505050565b60006001600160ff1b038211156118485760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610611565b5090565b6000806000866001015412611862576000611865565b60015b90508015611945576000611878600d5490565b90506000876001015461188a90612905565b905060006118988383611a0b565b905060006118c16118bb836118ac8b6117de565b6118b691906128af565b611c0f565b83611c1a565b90506706f05b59d3b2000081126119405760405162461bcd60e51b815260206004820152603e60248201527f416d6f756e74207375626d697474656420746f6f206661722066726f6d20746860448201527f65206d61726b6574207072696365206f662074686520706f736974696f6e00006064820152608401610611565b505050505b61194f8686611c26565b6119599083612799565b9150856000015461196f87600101548686611ce9565b6119799190612799565b61156b9083612799565b6000806000905060008085602001511361199e5760006119a1565b60015b90508360400151856040015114611a035780156119d357836040015185604001516119cc91906128af565b91506119ea565b846040015184604001516119e791906128af565b91505b611a00826119fb8760000151611c0f565b611a0b565b92505b505092915050565b60006106638383611e75565b60006106638383611f3a565b6004426000611a31600d5490565b90506000611a3e600a5490565b90506000611a4f6118bb83856128af565b8554909150600090611a6e90610d72906001600160801b0316876128ee565b90506000611a7c838361282c565b90506201518082611a95670de0b6b3a764000084611a0b565b611a9f919061282c565b611aa991906127f2565b876001016000828254611abc9190612799565b909155505086546fffffffffffffffffffffffffffffffff19166001600160801b0396909616959095179095555050505050565b6000808315611b825766b1a2bc2ec50000611b0c866000611f4f565b1115611b5a5760405162461bcd60e51b815260206004820152601a60248201527f54726164652073697a652065786365656473206d6178696d756d0000000000006044820152606401610611565b611b63856117de565b611b6c90612905565b9150611b7b610d728685611f87565b9050611c07565b66b1a2bc2ec50000611b95866001611f4f565b1115611be35760405162461bcd60e51b815260206004820152601a60248201527f54726164652073697a652065786365656473206d6178696d756d0000000000006044820152606401610611565b611bf0610d7286856120e4565b9150611bfb856117de565b611c0490612905565b90505b935093915050565b6000610b708261220b565b60006106638383612247565b815460009015611cd757604080516080810182528454815260018086015460208084019190915260028701548385015260038701546060808501919091528451908101855286546001600160801b038082168352600160801b90910416918101919091529085015492810192909252611c9e91611983565b60405181815290915033907f80e0390293518f32f7dd0263110e1ad3993a790da199ee8d2d931eb66265bd9b9060200160405180910390a25b60019091015460029092019190915590565b60008060008513611cfb576000611cfe565b60015b9050600081611d1d57611d18611d1387612905565b61230d565b611d26565b611d268661230d565b90508115611d4d576000611d3a82866120e4565b9050611d45816117de565b935050611e6c565b6000611d598686611f87565b905081811015611dc05760405162461bcd60e51b815260206004820152602c60248201527f4e6f7420656e6f7567682072657475726e65642c2070726f706f73656420616d60448201526b6f756e7420746f6f206c6f7760a01b6064820152608401610611565b6000611dcc83836128ee565b905060008115611e4157611ddf8261235f565b15611df657611def8260006120e4565b9050611e41565b6040518281527f56dd3b38618f9202d3cd3e3b1b0b979b53c56ca0b3847420ce3b2f2cc2cff7df9060200160405180910390a18160076000828254611e3b91906127da565b90915550505b611e4a816117de565b611e53896117de565b611e5c90612905565b611e669190612799565b95505050505b50509392505050565b6000600160ff1b831480611e8c5750600160ff1b82145b15611eaa57604051630d01a11b60e21b815260040160405180910390fd5b60008060008512611ebb5784611ec0565b846000035b915060008412611ed05783611ed5565b836000035b90506000611ee38383612455565b90506001600160ff1b03811115611f105760405163bf79e8d960e01b815260048101829052602401610611565b600019808713908613808218600114611f295782611f2e565b826000035b98975050505050505050565b600061066383670de0b6b3a764000084612517565b600354604051634903b0d160e01b8152600481018390526000916106639185916001600160a01b031690634903b0d190602401610913565b60015460405163140e25ad60e31b8152600481018490526000916001600160a01b03169063a0712d6890602401600060405180830381600087803b158015611fce57600080fd5b505af1158015611fe2573d6000803e3d6000fd5b5050600354604051630b68372160e31b815260006004820181905260016024830152604482018890526064820187905293506001600160a01b039091169150635b41b90890608401602060405180830381600087803b15801561204457600080fd5b505af1158015612058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207c91906126c7565b600054604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c68906024015b600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b50929695505050505050565b6000805460405163140e25ad60e31b8152600481018590526001600160a01b039091169063a0712d6890602401600060405180830381600087803b15801561212b57600080fd5b505af115801561213f573d6000803e3d6000fd5b5050600354604051630b68372160e31b815260016004820152600060248201819052604482018890526064820187905293506001600160a01b039091169150635b41b90890608401602060405180830381600087803b1580156121a157600080fd5b505af11580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d991906126c7565b600154604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c68906024016120aa565b6000600160ff1b82141561223257604051631d0742e360e21b815260040160405180910390fd5b600082126122405781610b70565b5060000390565b6000600160ff1b83148061225e5750600160ff1b82145b1561227c5760405163b3c754a360e01b815260040160405180910390fd5b6000806000851261228d5784612292565b846000035b9150600084126122a257836122a7565b836000035b905060006122be83670de0b6b3a764000084612517565b90506001600160ff1b038111156122eb57604051637cb4bef560e01b815260048101829052602401610611565b6000198087139086138082186001146123045782611f2e565b611f2e83612905565b6000808212156118485760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610611565b60035460405163556d6e9f60e01b81526001600482015260006024820181905260448201849052916001600160a01b03169063556d6e9f9060640160206040518083038186803b1580156123b257600080fd5b505afa9250505080156123e2575060408051601f3d908101601f191682019092526123df918101906126c7565b60015b612447577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab604051612437906020808252600f908201526e5377617020696d706f737369626c6560881b604082015260600190565b60405180910390a1506000919050565b50600192915050565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106124995760405163698d9a0160e11b815260048101829052602401610611565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826124d35780670de0b6b3a7640000850401945050505050610b70565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000808060001985870985870292508281108382030391505080600014156125605783828161255657634e487b7160e01b600052601260045260246000fd5b0492505050610663565b83811061258a57604051631dcf306360e21b81526004810182905260248101859052604401610611565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b038116811461245057600080fd5b60006020828403121561261b578081fd5b610663826125f3565b60008060408385031215612636578081fd5b61263f836125f3565b946020939093013593505050565b60008060008060808587031215612662578182fd5b61266b856125f3565b935060208501359250604085013560028110612685578283fd5b9396929550929360600135925050565b6000806000606084860312156126a9578283fd5b6126b2846125f3565b95602085013595506040909401359392505050565b6000602082840312156126d8578081fd5b5051919050565b6000602082840312156126f0578081fd5b5035919050565b8060005b600281101561271a5781518452602093840193909101906001016126fb565b50505050565b6060810161272e82856126f7565b8260408301529392505050565b6020808252602a908201527f4f6e6c7920636c656172696e6720686f7573652063616e2063616c6c207468696040820152693990333ab731ba34b7b760b11b606082015260800190565b8281526060810161066360208301846126f7565b600080821280156001600160ff1b03849003851316156127bb576127bb61291f565b600160ff1b83900384128116156127d4576127d461291f565b50500190565b600082198211156127ed576127ed61291f565b500190565b60008261280d57634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156128275761282761291f565b500590565b60006001600160ff1b03818413828413808216868404861116156128525761285261291f565b600160ff1b848712828116878305891216156128705761287061291f565b85871292508782058712848416161561288b5761288b61291f565b878505871281841616156128a1576128a161291f565b505050929093029392505050565b60008083128015600160ff1b8501841216156128cd576128cd61291f565b6001600160ff1b03840183138116156128e8576128e861291f565b50500390565b6000828210156129005761290061291f565b500390565b6000600160ff1b82141561291b5761291b61291f565b0390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a1b21284d49f9f55ad396d8877ad80bdbe7ef3674512cb721f3e7ea70c2ebfa264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638516e6dc11610125578063bad5e0e6116100ad578063cefc49931161007c578063cefc499314610487578063d57ba73c1461049a578063db884c0d146104a2578063dd027c1c146104aa578063f7d245da146104b357600080fd5b8063bad5e0e614610450578063bcbaf48714610458578063bf02e92f1461046b578063c5f1916c1461047457600080fd5b8063a201ccf6116100f4578063a201ccf61461040a578063a42d8b6b1461041d578063acdb520814610430578063b0aae7231461043e578063b888a8791461044757600080fd5b80638516e6dc146103855780639027b59e1461038f5780639b497ec8146103f8578063a1c5a4901461040157600080fd5b80635fea6120116101a85780637532792d116101775780637532792d14610302578063793962d8146103155780637a8f15eb1461035b5780637f564fea1461036a57806380f556051461037257600080fd5b80635fea6120146102cc57806360551d5f146102df5780636eea8dab146102e7578063704a0c70146102fa57600080fd5b806345a15388116101ef57806345a15388146102785780634bc36bd6146102805780634fa9c4db14610293578063508fbda6146102a6578063544305bf146102b957600080fd5b80630af968001461022157806310bace8c14610251578063214c302e146102675780632fda593c1461026f575b600080fd5b600254610234906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102596104db565b604051908152602001610248565b600754610259565b610259600c5481565b610259610567565b600154610234906001600160a01b031681565b6102596102a1366004612695565b6105ac565b6102596102b436600461260a565b61066a565b6102596102c736600461260a565b6106f6565b6102596102da366004612624565b610773565b610259610b76565b6102596102f5366004612624565b610bbb565b610259600181565b6102596103103660046126df565b610c4e565b61032861032336600461260a565b610cda565b60405161024891908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b610259670de0b6b3a764000081565b600a54610259565b600354610234906001600160a01b031681565b61038d610d53565b005b60408051606080820183526000808352602080840182905292840152825180820184526004546001600160801b03808216808452600160801b90920481168386019081526005549387019384528651928352511693810193909352519282019290925201610248565b610259600d5481565b61025960095481565b61038d610418366004612624565b610eb7565b61025961042b3660046126df565b6114a2565b61025966b1a2bc2ec5000081565b61025960085481565b610259600b5481565b61038d6114e2565b610259610466366004612624565b61150e565b610259600a5481565b600054610234906001600160a01b031681565b61032861049536600461260a565b611575565b600d54610259565b610259600081565b61025961038481565b6104c66104c136600461264d565b6115ee565b60408051928352602083019190915201610248565b60008060009054906101000a90046001600160a01b03166001600160a01b03166358c0994a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561052a57600080fd5b505afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056291906126c7565b905090565b60035460408051633051afe560e21b815290516000926001600160a01b03169163c146bf94916004808301926020929190829003018186803b15801561052a57600080fd5b6001600160a01b0383166000908152600e60205260408120805460049061061a5760405162461bcd60e51b815260206004820152601c60248201527f4e6f20706f736974696f6e2063757272656e746c79206f70656e65640000000060448201526064015b60405180910390fd5b6106226114e2565b60006106308383888861184c565b6001600160a01b0388166000908152600e6020526040812081815560018101829055600281018290556003015593505050505b9392505050565b6001600160a01b0381166000908152600e60209081526040808320815160808101835281548152600182015481850152600282015481840152600390910154606080830191909152825190810183526004546001600160801b038082168352600160801b909104169381019390935260055491830191909152906106ee8282611983565b949350505050565b6001600160a01b0381166000908152600e6020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015281610748600d5490565b9050600061075a836020015183611a0b565b835190915061076a908290612799565b95945050505050565b6002546000906001600160a01b031633146107a05760405162461bcd60e51b81526004016106119061273b565b816107db5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610611565b6001600160a01b0383166000908152600f6020526040902060030154156108445760405162461bcd60e51b815260206004820152601d60248201527f4861732070726f7669646564206c6971756964697479206265666f72650000006044820152606401610611565b60006006546000141561086857610859610567565b90506108636114e2565b61096b565b600354604051634903b0d160e01b815260006004820152610968916001600160a01b031690634903b0d19060240160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906126c7565b600354604051634903b0d160e01b8152600160048201526001600160a01b0390911690634903b0d1906024015b60206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096391906126c7565b611a17565b90505b60006109778483611a17565b60015460405163140e25ad60e31b8152600481018790529192506001600160a01b03169063a0712d6890602401600060405180830381600087803b1580156109be57600080fd5b505af11580156109d2573d6000803e3d6000fd5b505060005460405163140e25ad60e31b8152600481018590526001600160a01b03909116925063a0712d689150602401600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b5050600354604080518082018252888152602081018690529051630b4c7e4d60e01b8152600094506001600160a01b039092169250630b4c7e4d91610a7a91908590600401612720565b602060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc91906126c7565b90506040518060800160405280610ae2876117de565b610aeb90612905565b8152602001610af9846117de565b610b0290612905565b815260055460208083019190915260409182018490526001600160a01b0389166000908152600f82528281208451815591840151600183015591830151600282015560609092015160039092019190915560068054839290610b659084906127da565b909155509193505050505b92915050565b600354604080516386fc88d360e01b815290516000926001600160a01b0316916386fc88d3916004808301926020929190829003018186803b15801561052a57600080fd5b6002546000906001600160a01b03163314610be85760405162461bcd60e51b81526004016106119061273b565b6001600160a01b0383166000908152600f602052604090206004610c0a6114e2565b610c17828286600061184c565b6001600160a01b039095166000908152600f6020526040812081815560018101829055600281018290556003015550929392505050565b60035460405163556d6e9f60e01b81526000600482018190526001602483015260448201849052916001600160a01b03169063556d6e9f906064015b60206040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7091906126c7565b610d056040518060800160405280600081526020016000815260200160008152602001600081525090565b506001600160a01b03166000908152600e6020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b6004544290600090610d7790610d72906001600160801b0316846128ee565b6117de565b90506000610d836104db565b9050610d8f828261282c565b600854610d9c9190612799565b6008556000610dac610d72610567565b9050610db8838261282c565b600b54610dc59190612799565b600b55600454600090610de890600160801b90046001600160801b0316426128ee565b90506103848110610eb057610dfc816117de565b600954600854610e0c91906128af565b610e1691906127f2565b600a55610e22816117de565b600c54600b54610e3291906128af565b610e3c91906127f2565b600d819055600854600955600b54600c55600480546001600160801b03908116600160801b429283160217909155600a546040805192835260208301919091528101919091527f2da2327ef0b8399af5cbcc8efd04003d712631ecc4c1eb11231cc6d840f5275e9060600160405180910390a15b5050505050565b6002546001600160a01b03163314610ee15760405162461bcd60e51b81526004016106119061273b565b6001600160a01b0382166000908152600f602052604090206003810154821115610f4d5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f756768206c69717569646974792070726f76696465640000006044820152606401610611565b81816003016000828254610f6191906128ee565b925050819055508160066000828254610f7a91906128ee565b90915550506001546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b158015610fc757600080fd5b505afa158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff91906126c7565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906126c7565b6003546040805180820182526000808252602082015290516316cd8e2760e21b81529293506001600160a01b0390911691635b36389c916110c6918a9190600401612785565b600060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b50506001546003546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a082319060240160206040518083038186803b15801561114257600080fd5b505afa158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a91906126c7565b116111be5760405162461bcd60e51b8152602060048201526014602482015273165bdd48189c9bdad9481d1a19481b585c9ad95d60621b6044820152606401610611565b600080546003546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e91906126c7565b116112825760405162461bcd60e51b8152602060048201526014602482015273165bdd48189c9bdad9481d1a19481b585c9ad95d60621b6044820152606401610611565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156112c657600080fd5b505afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe91906126c7565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a082319060240160206040518083038186803b15801561134757600080fd5b505afa15801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f91906126c7565b905061138b84836128ee565b945061139783826128ee565b600154604051630852cd8d60e31b8152600481018890529197506001600160a01b0316906342966c6890602401600060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b5050600054604051630852cd8d60e31b8152600481018a90526001600160a01b0390911692506342966c689150602401600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b5050505050505050611461816117de565b8360000160008282546114749190612799565b909155506114839050826117de565b8360010160008282546114969190612799565b90915550505050505050565b60035460405163556d6e9f60e01b81526001600482015260006024820181905260448201849052916001600160a01b03169063556d6e9f90606401610c8a565b6004805442906001600160801b03168082111561150957611501610d53565b611509611a23565b505050565b6002546000906001600160a01b0316331461153b5760405162461bcd60e51b81526004016106119061273b565b6115436114e2565b6001600160a01b0383166000908152600e602052604081209060049061156b8383878461184c565b9695505050505050565b6115a06040518060800160405280600081526020016000815260200160008152602001600081525090565b506001600160a01b03166000908152600f6020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b60025460009081906001600160a01b0316331461161d5760405162461bcd60e51b81526004016106119061273b565b6000851161166d5760405162461bcd60e51b815260206004820152601860248201527f54686520616d6f756e742063616e2774206265206e756c6c00000000000000006044820152606401610611565b6001600160a01b0386166000908152600e6020526040902054156117075760405162461bcd60e51b8152602060048201526044602482018190527f43616e6e6f74206f70656e206120706f736974696f6e2077697468206f6e6520908201527f616c7265616479206f70656e6564206f72206c69717569646974792070726f766064820152631a59195960e21b608482015260a401610611565b61170f6114e2565b60008085600181111561173257634e487b7160e01b600052602160045260246000fd5b1461173e576000611741565b60015b9050600080611751888488611af0565b91509150604051806080016040528083815260200182815260200160046001015481526020016000815250600e60008b6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505081819450945050505094509492505050565b60006001600160ff1b038211156118485760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610611565b5090565b6000806000866001015412611862576000611865565b60015b90508015611945576000611878600d5490565b90506000876001015461188a90612905565b905060006118988383611a0b565b905060006118c16118bb836118ac8b6117de565b6118b691906128af565b611c0f565b83611c1a565b90506706f05b59d3b2000081126119405760405162461bcd60e51b815260206004820152603e60248201527f416d6f756e74207375626d697474656420746f6f206661722066726f6d20746860448201527f65206d61726b6574207072696365206f662074686520706f736974696f6e00006064820152608401610611565b505050505b61194f8686611c26565b6119599083612799565b9150856000015461196f87600101548686611ce9565b6119799190612799565b61156b9083612799565b6000806000905060008085602001511361199e5760006119a1565b60015b90508360400151856040015114611a035780156119d357836040015185604001516119cc91906128af565b91506119ea565b846040015184604001516119e791906128af565b91505b611a00826119fb8760000151611c0f565b611a0b565b92505b505092915050565b60006106638383611e75565b60006106638383611f3a565b6004426000611a31600d5490565b90506000611a3e600a5490565b90506000611a4f6118bb83856128af565b8554909150600090611a6e90610d72906001600160801b0316876128ee565b90506000611a7c838361282c565b90506201518082611a95670de0b6b3a764000084611a0b565b611a9f919061282c565b611aa991906127f2565b876001016000828254611abc9190612799565b909155505086546fffffffffffffffffffffffffffffffff19166001600160801b0396909616959095179095555050505050565b6000808315611b825766b1a2bc2ec50000611b0c866000611f4f565b1115611b5a5760405162461bcd60e51b815260206004820152601a60248201527f54726164652073697a652065786365656473206d6178696d756d0000000000006044820152606401610611565b611b63856117de565b611b6c90612905565b9150611b7b610d728685611f87565b9050611c07565b66b1a2bc2ec50000611b95866001611f4f565b1115611be35760405162461bcd60e51b815260206004820152601a60248201527f54726164652073697a652065786365656473206d6178696d756d0000000000006044820152606401610611565b611bf0610d7286856120e4565b9150611bfb856117de565b611c0490612905565b90505b935093915050565b6000610b708261220b565b60006106638383612247565b815460009015611cd757604080516080810182528454815260018086015460208084019190915260028701548385015260038701546060808501919091528451908101855286546001600160801b038082168352600160801b90910416918101919091529085015492810192909252611c9e91611983565b60405181815290915033907f80e0390293518f32f7dd0263110e1ad3993a790da199ee8d2d931eb66265bd9b9060200160405180910390a25b60019091015460029092019190915590565b60008060008513611cfb576000611cfe565b60015b9050600081611d1d57611d18611d1387612905565b61230d565b611d26565b611d268661230d565b90508115611d4d576000611d3a82866120e4565b9050611d45816117de565b935050611e6c565b6000611d598686611f87565b905081811015611dc05760405162461bcd60e51b815260206004820152602c60248201527f4e6f7420656e6f7567682072657475726e65642c2070726f706f73656420616d60448201526b6f756e7420746f6f206c6f7760a01b6064820152608401610611565b6000611dcc83836128ee565b905060008115611e4157611ddf8261235f565b15611df657611def8260006120e4565b9050611e41565b6040518281527f56dd3b38618f9202d3cd3e3b1b0b979b53c56ca0b3847420ce3b2f2cc2cff7df9060200160405180910390a18160076000828254611e3b91906127da565b90915550505b611e4a816117de565b611e53896117de565b611e5c90612905565b611e669190612799565b95505050505b50509392505050565b6000600160ff1b831480611e8c5750600160ff1b82145b15611eaa57604051630d01a11b60e21b815260040160405180910390fd5b60008060008512611ebb5784611ec0565b846000035b915060008412611ed05783611ed5565b836000035b90506000611ee38383612455565b90506001600160ff1b03811115611f105760405163bf79e8d960e01b815260048101829052602401610611565b600019808713908613808218600114611f295782611f2e565b826000035b98975050505050505050565b600061066383670de0b6b3a764000084612517565b600354604051634903b0d160e01b8152600481018390526000916106639185916001600160a01b031690634903b0d190602401610913565b60015460405163140e25ad60e31b8152600481018490526000916001600160a01b03169063a0712d6890602401600060405180830381600087803b158015611fce57600080fd5b505af1158015611fe2573d6000803e3d6000fd5b5050600354604051630b68372160e31b815260006004820181905260016024830152604482018890526064820187905293506001600160a01b039091169150635b41b90890608401602060405180830381600087803b15801561204457600080fd5b505af1158015612058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207c91906126c7565b600054604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c68906024015b600060405180830381600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b50929695505050505050565b6000805460405163140e25ad60e31b8152600481018590526001600160a01b039091169063a0712d6890602401600060405180830381600087803b15801561212b57600080fd5b505af115801561213f573d6000803e3d6000fd5b5050600354604051630b68372160e31b815260016004820152600060248201819052604482018890526064820187905293506001600160a01b039091169150635b41b90890608401602060405180830381600087803b1580156121a157600080fd5b505af11580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d991906126c7565b600154604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c68906024016120aa565b6000600160ff1b82141561223257604051631d0742e360e21b815260040160405180910390fd5b600082126122405781610b70565b5060000390565b6000600160ff1b83148061225e5750600160ff1b82145b1561227c5760405163b3c754a360e01b815260040160405180910390fd5b6000806000851261228d5784612292565b846000035b9150600084126122a257836122a7565b836000035b905060006122be83670de0b6b3a764000084612517565b90506001600160ff1b038111156122eb57604051637cb4bef560e01b815260048101829052602401610611565b6000198087139086138082186001146123045782611f2e565b611f2e83612905565b6000808212156118485760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610611565b60035460405163556d6e9f60e01b81526001600482015260006024820181905260448201849052916001600160a01b03169063556d6e9f9060640160206040518083038186803b1580156123b257600080fd5b505afa9250505080156123e2575060408051601f3d908101601f191682019092526123df918101906126c7565b60015b612447577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab604051612437906020808252600f908201526e5377617020696d706f737369626c6560881b604082015260600190565b60405180910390a1506000919050565b50600192915050565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106124995760405163698d9a0160e11b815260048101829052602401610611565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826124d35780670de0b6b3a7640000850401945050505050610b70565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000808060001985870985870292508281108382030391505080600014156125605783828161255657634e487b7160e01b600052601260045260246000fd5b0492505050610663565b83811061258a57604051631dcf306360e21b81526004810182905260248101859052604401610611565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b038116811461245057600080fd5b60006020828403121561261b578081fd5b610663826125f3565b60008060408385031215612636578081fd5b61263f836125f3565b946020939093013593505050565b60008060008060808587031215612662578182fd5b61266b856125f3565b935060208501359250604085013560028110612685578283fd5b9396929550929360600135925050565b6000806000606084860312156126a9578283fd5b6126b2846125f3565b95602085013595506040909401359392505050565b6000602082840312156126d8578081fd5b5051919050565b6000602082840312156126f0578081fd5b5035919050565b8060005b600281101561271a5781518452602093840193909101906001016126fb565b50505050565b6060810161272e82856126f7565b8260408301529392505050565b6020808252602a908201527f4f6e6c7920636c656172696e6720686f7573652063616e2063616c6c207468696040820152693990333ab731ba34b7b760b11b606082015260800190565b8281526060810161066360208301846126f7565b600080821280156001600160ff1b03849003851316156127bb576127bb61291f565b600160ff1b83900384128116156127d4576127d461291f565b50500190565b600082198211156127ed576127ed61291f565b500190565b60008261280d57634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156128275761282761291f565b500590565b60006001600160ff1b03818413828413808216868404861116156128525761285261291f565b600160ff1b848712828116878305891216156128705761287061291f565b85871292508782058712848416161561288b5761288b61291f565b878505871281841616156128a1576128a161291f565b505050929093029392505050565b60008083128015600160ff1b8501841216156128cd576128cd61291f565b6001600160ff1b03840183138116156128e8576128e861291f565b50500390565b6000828210156129005761290061291f565b500390565b6000600160ff1b82141561291b5761291b61291f565b0390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a1b21284d49f9f55ad396d8877ad80bdbe7ef3674512cb721f3e7ea70c2ebfa264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "closePosition(address,uint256,uint256)": {
        "params": {
          "tentativeVQuoteAmount": "Amount of vQuote tokens to be sold for SHORT positions (anything works for LONG position)"
        }
      },
      "getExpectedVBaseAmount(uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `openPosition`"
      },
      "getExpectedVQuoteAmount(uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `openPosition`"
      },
      "liquidate(address,uint256)": {
        "params": {
          "tentativeVQuoteAmount": "Amount of vQuote tokens to be sold for SHORT positions (anything works for LONG position)"
        }
      },
      "openPosition(address,uint256,uint8,uint256)": {
        "details": "No number for the leverage is given but the amount in the vault must be bigger than MIN_MARGIN_AT_CREATIONNo checks are done if bought amount exceeds allowance",
        "params": {
          "amount": "to be sold, in vQuote (if long) or vBase (if short)"
        }
      },
      "provideLiquidity(address,uint256)": {
        "params": {
          "account": "liquidity provider",
          "wadAmount": "amount of vQuote provided with 1e18 precision"
        }
      },
      "removeLiquidity(address,uint256)": {
        "params": {
          "amount": "of liquidity to be removed from the pool (with 18 decimals)"
        }
      },
      "settleAndWithdrawLiquidity(address,uint256)": {
        "params": {
          "tentativeVQuoteAmount": "at which to buy the LP position (if it looks like a short, more vQuote than vBase). 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__AbsInputTooSmall()": [
        {
          "notice": "Emitted when the input is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivOverflow(uint256)": [
        {
          "notice": "Emitted when one of the intermediary unsigned results overflows SD59x18."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "closePosition(address,uint256,uint256)": {
        "notice": "Closes position from account holder"
      },
      "getBaseDust()": {
        "notice": "TODO: find a way to withdraw the dust"
      },
      "getExpectedVBaseAmount(uint256)": {
        "notice": "Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` (excluding slippage)"
      },
      "getExpectedVQuoteAmount(uint256)": {
        "notice": "Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` (excluding slippage)"
      },
      "indexPrice()": {
        "notice": "Return the current off-chain exchange rate for vBase/vQuote"
      },
      "marketPrice()": {
        "notice": "Return the last traded price (used for TWAP)"
      },
      "marketPriceOracle()": {
        "notice": "Return the curve price oracle"
      },
      "openPosition(address,uint256,uint8,uint256)": {
        "notice": "Open position, long or short"
      },
      "provideLiquidity(address,uint256)": {
        "notice": "Provide liquidity to the pool"
      },
      "removeLiquidity(address,uint256)": {
        "notice": "Remove liquidity from the pool (but don't close LP position and withdraw amount)"
      },
      "settleAndWithdrawLiquidity(address,uint256)": {
        "notice": "Remove liquidity from the pool (but don't close LP position and withdraw amount).Separated from `removeLiquidity` because `tentativeVQuoteAmount` can't guessed at the moment when user calls `removeLiquidity`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3346,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "vBase",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVBase)6003"
      },
      {
        "astId": 3350,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "vQuote",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVQuote)6010"
      },
      {
        "astId": 3354,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "clearingHouse",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IClearingHouse)5594"
      },
      {
        "astId": 3358,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "market",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICryptoSwap)5669"
      },
      {
        "astId": 3361,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "globalPosition",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(GlobalPosition)6330_storage"
      },
      {
        "astId": 3363,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "totalLiquidityProvided",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3365,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "vBaseDust",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3367,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "oracleCumulativeAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_int256"
      },
      {
        "astId": 3369,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "oracleCumulativeAmountAtBeginningOfPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_int256"
      },
      {
        "astId": 3371,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "oracleTwap",
        "offset": 0,
        "slot": "10",
        "type": "t_int256"
      },
      {
        "astId": 3373,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "marketCumulativeAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_int256"
      },
      {
        "astId": 3375,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "marketCumulativeAmountAtBeginningOfPeriod",
        "offset": 0,
        "slot": "12",
        "type": "t_int256"
      },
      {
        "astId": 3377,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "marketTwap",
        "offset": 0,
        "slot": "13",
        "type": "t_int256"
      },
      {
        "astId": 3382,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "traderPosition",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(UserPosition)6323_storage)"
      },
      {
        "astId": 3387,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "lpPosition",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(UserPosition)6323_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IClearingHouse)5594": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoSwap)5669": {
        "encoding": "inplace",
        "label": "contract ICryptoSwap",
        "numberOfBytes": "20"
      },
      "t_contract(IVBase)6003": {
        "encoding": "inplace",
        "label": "contract IVBase",
        "numberOfBytes": "20"
      },
      "t_contract(IVQuote)6010": {
        "encoding": "inplace",
        "label": "contract IVQuote",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserPosition)6323_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPerpetual.UserPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(UserPosition)6323_storage"
      },
      "t_struct(GlobalPosition)6330_storage": {
        "encoding": "inplace",
        "label": "struct LibPerpetual.GlobalPosition",
        "members": [
          {
            "astId": 6325,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "timeOfLastTrade",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6327,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "timeOfLastFunding",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6329,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "cumFundingRate",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserPosition)6323_storage": {
        "encoding": "inplace",
        "label": "struct LibPerpetual.UserPosition",
        "members": [
          {
            "astId": 6316,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "openNotional",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 6318,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "positionSize",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 6320,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "cumFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 6322,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "liquidityBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}