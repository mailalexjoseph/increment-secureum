import fs from 'fs';
import path from 'path';
import {HardhatPluginError} from 'hardhat/plugins';

import {task} from 'hardhat/config';
import {name} from '../package.json';

// @dev: Performs 3 steps:
// 1) copies files from the contract-dependencies folder to the contract folder
// 2) compiles the contract
// 3) removes the copied files
task(
  'compile-dependencies',
  'Compiles contracts and contract-dependencies',
  async function (args, hre) {
    // in directory name
    const directory = './contract-dependencies';

    // out directory name
    const outDirectoryFullPath = path.resolve(
      hre.config.paths.sources,
      directory
    );

    if (!outDirectoryFullPath.startsWith(hre.config.paths.sources)) {
      throw new HardhatPluginError(
        'resolved path must be inside of sources outDirectoryFullPath'
      );
    }

    if (outDirectoryFullPath === hre.config.paths.sources) {
      throw new HardhatPluginError(
        'resolved path must not be sources outDirectoryFullPath'
      );
    }

    // clean-up:
    const tracker = path.resolve(outDirectoryFullPath, `.${name}`);
    if (fs.existsSync(outDirectoryFullPath)) {
      if (fs.existsSync(tracker)) {
        fs.rmSync(outDirectoryFullPath, {recursive: true});
      } else {
        throw new HardhatPluginError(
          `temporary source directory must have been generated by ${name}`
        );
      }
    }
    fs.mkdirSync(outDirectoryFullPath);
    fs.writeFileSync(
      tracker,
      `directory approved for write access by ${name}\n`
    );

    // get all files in inDirectory (TODO: Level 2)
    const inFullPath = path.resolve(hre.config.paths.root, directory);
    fs.readdirSync(path.resolve(inFullPath)).forEach((file) => {
      const inFileFullPath = path.resolve(inFullPath, file);

      //  get destination files
      const outFileFullPath = path.join(outDirectoryFullPath, file);

      // copy files
      fs.copyFileSync(
        inFileFullPath,
        outFileFullPath,
        fs.constants.COPYFILE_EXCL
      );
    });

    // compile contracts
    await hre.run('compile');

    // clean up
    fs.rmSync(outDirectoryFullPath, {recursive: true});
  }
);
